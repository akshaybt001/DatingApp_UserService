// Code generated by MockGen. DO NOT EDIT.
// Source: adapterInterface.go

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	reflect "reflect"

	entities "github.com/akshaybt001/DatingApp_UserService/entities"
	helperStruct "github.com/akshaybt001/DatingApp_UserService/entities/helperStruct"
	gomock "github.com/golang/mock/gomock"
)

// MockAdapterInterface is a mock of AdapterInterface interface.
type MockAdapterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterInterfaceMockRecorder
}

// MockAdapterInterfaceMockRecorder is the mock recorder for MockAdapterInterface.
type MockAdapterInterfaceMockRecorder struct {
	mock *MockAdapterInterface
}

// NewMockAdapterInterface creates a new mock instance.
func NewMockAdapterInterface(ctrl *gomock.Controller) *MockAdapterInterface {
	mock := &MockAdapterInterface{ctrl: ctrl}
	mock.recorder = &MockAdapterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapterInterface) EXPECT() *MockAdapterInterfaceMockRecorder {
	return m.recorder
}

// AdminAddGender mocks base method.
func (m *MockAdapterInterface) AdminAddGender(arg0 entities.Gender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminAddGender", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminAddGender indicates an expected call of AdminAddGender.
func (mr *MockAdapterInterfaceMockRecorder) AdminAddGender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminAddGender", reflect.TypeOf((*MockAdapterInterface)(nil).AdminAddGender), arg0)
}

// AdminAddInterest mocks base method.
func (m *MockAdapterInterface) AdminAddInterest(arg0 entities.Interests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminAddInterest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminAddInterest indicates an expected call of AdminAddInterest.
func (mr *MockAdapterInterfaceMockRecorder) AdminAddInterest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminAddInterest", reflect.TypeOf((*MockAdapterInterface)(nil).AdminAddInterest), arg0)
}

// AdminGetAllGender mocks base method.
func (m *MockAdapterInterface) AdminGetAllGender() ([]entities.Gender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAllGender")
	ret0, _ := ret[0].([]entities.Gender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAllGender indicates an expected call of AdminGetAllGender.
func (mr *MockAdapterInterfaceMockRecorder) AdminGetAllGender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAllGender", reflect.TypeOf((*MockAdapterInterface)(nil).AdminGetAllGender))
}

// AdminGetAllInterest mocks base method.
func (m *MockAdapterInterface) AdminGetAllInterest() ([]entities.Interests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetAllInterest")
	ret0, _ := ret[0].([]entities.Interests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetAllInterest indicates an expected call of AdminGetAllInterest.
func (mr *MockAdapterInterfaceMockRecorder) AdminGetAllInterest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetAllInterest", reflect.TypeOf((*MockAdapterInterface)(nil).AdminGetAllInterest))
}

// AdminUpdateGender mocks base method.
func (m *MockAdapterInterface) AdminUpdateGender(arg0 entities.Gender) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateGender", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdateGender indicates an expected call of AdminUpdateGender.
func (mr *MockAdapterInterfaceMockRecorder) AdminUpdateGender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateGender", reflect.TypeOf((*MockAdapterInterface)(nil).AdminUpdateGender), arg0)
}

// AdminUpdateInterest mocks base method.
func (m *MockAdapterInterface) AdminUpdateInterest(arg0 entities.Interests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminUpdateInterest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminUpdateInterest indicates an expected call of AdminUpdateInterest.
func (mr *MockAdapterInterfaceMockRecorder) AdminUpdateInterest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminUpdateInterest", reflect.TypeOf((*MockAdapterInterface)(nil).AdminUpdateInterest), arg0)
}

// CreateProfile mocks base method.
func (m *MockAdapterInterface) CreateProfile(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockAdapterInterfaceMockRecorder) CreateProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockAdapterInterface)(nil).CreateProfile), userID)
}

// DecrementLikeCount mocks base method.
func (m *MockAdapterInterface) DecrementLikeCount(userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementLikeCount", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementLikeCount indicates an expected call of DecrementLikeCount.
func (mr *MockAdapterInterfaceMockRecorder) DecrementLikeCount(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementLikeCount", reflect.TypeOf((*MockAdapterInterface)(nil).DecrementLikeCount), userId)
}

// FetchImages mocks base method.
func (m *MockAdapterInterface) FetchImages(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchImages", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchImages indicates an expected call of FetchImages.
func (mr *MockAdapterInterfaceMockRecorder) FetchImages(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchImages", reflect.TypeOf((*MockAdapterInterface)(nil).FetchImages), id)
}

// FetchInterests mocks base method.
func (m *MockAdapterInterface) FetchInterests(id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchInterests", id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchInterests indicates an expected call of FetchInterests.
func (mr *MockAdapterInterfaceMockRecorder) FetchInterests(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchInterests", reflect.TypeOf((*MockAdapterInterface)(nil).FetchInterests), id)
}

// FetchPreference mocks base method.
func (m *MockAdapterInterface) FetchPreference(arg0 string) (helperStruct.FetchPreference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPreference", arg0)
	ret0, _ := ret[0].(helperStruct.FetchPreference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPreference indicates an expected call of FetchPreference.
func (mr *MockAdapterInterfaceMockRecorder) FetchPreference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPreference", reflect.TypeOf((*MockAdapterInterface)(nil).FetchPreference), arg0)
}

// FetchUser mocks base method.
func (m *MockAdapterInterface) FetchUser(profile string) (helperStruct.FetchUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", profile)
	ret0, _ := ret[0].(helperStruct.FetchUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUser indicates an expected call of FetchUser.
func (mr *MockAdapterInterfaceMockRecorder) FetchUser(profile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockAdapterInterface)(nil).FetchUser), profile)
}

// FetchUsers mocks base method.
func (m *MockAdapterInterface) FetchUsers(maxAge, minAge, gender int, id string) ([]helperStruct.Home, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUsers", maxAge, minAge, gender, id)
	ret0, _ := ret[0].([]helperStruct.Home)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUsers indicates an expected call of FetchUsers.
func (mr *MockAdapterInterfaceMockRecorder) FetchUsers(maxAge, minAge, gender, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUsers", reflect.TypeOf((*MockAdapterInterface)(nil).FetchUsers), maxAge, minAge, gender, id)
}

// GetAddressByProfileId mocks base method.
func (m *MockAdapterInterface) GetAddressByProfileId(profileId string) (entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressByProfileId", profileId)
	ret0, _ := ret[0].(entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressByProfileId indicates an expected call of GetAddressByProfileId.
func (mr *MockAdapterInterfaceMockRecorder) GetAddressByProfileId(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressByProfileId", reflect.TypeOf((*MockAdapterInterface)(nil).GetAddressByProfileId), profileId)
}

// GetAdminByEmail mocks base method.
func (m *MockAdapterInterface) GetAdminByEmail(email string) (entities.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByEmail", email)
	ret0, _ := ret[0].(entities.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByEmail indicates an expected call of GetAdminByEmail.
func (mr *MockAdapterInterfaceMockRecorder) GetAdminByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByEmail", reflect.TypeOf((*MockAdapterInterface)(nil).GetAdminByEmail), email)
}

// GetAge mocks base method.
func (m *MockAdapterInterface) GetAge(profileId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAge", profileId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAge indicates an expected call of GetAge.
func (mr *MockAdapterInterfaceMockRecorder) GetAge(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAge", reflect.TypeOf((*MockAdapterInterface)(nil).GetAge), profileId)
}

// GetGenderById mocks base method.
func (m *MockAdapterInterface) GetGenderById(id int) (helperStruct.GenderHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenderById", id)
	ret0, _ := ret[0].(helperStruct.GenderHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenderById indicates an expected call of GetGenderById.
func (mr *MockAdapterInterfaceMockRecorder) GetGenderById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenderById", reflect.TypeOf((*MockAdapterInterface)(nil).GetGenderById), id)
}

// GetGenderByName mocks base method.
func (m *MockAdapterInterface) GetGenderByName(gender string) (entities.Gender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenderByName", gender)
	ret0, _ := ret[0].(entities.Gender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenderByName indicates an expected call of GetGenderByName.
func (mr *MockAdapterInterfaceMockRecorder) GetGenderByName(gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenderByName", reflect.TypeOf((*MockAdapterInterface)(nil).GetGenderByName), gender)
}

// GetGenderByProfileId mocks base method.
func (m *MockAdapterInterface) GetGenderByProfileId(id string) (entities.UserGenders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenderByProfileId", id)
	ret0, _ := ret[0].(entities.UserGenders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenderByProfileId indicates an expected call of GetGenderByProfileId.
func (mr *MockAdapterInterfaceMockRecorder) GetGenderByProfileId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenderByProfileId", reflect.TypeOf((*MockAdapterInterface)(nil).GetGenderByProfileId), id)
}

// GetInterestById mocks base method.
func (m *MockAdapterInterface) GetInterestById(id int) (helperStruct.InterestHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterestById", id)
	ret0, _ := ret[0].(helperStruct.InterestHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterestById indicates an expected call of GetInterestById.
func (mr *MockAdapterInterfaceMockRecorder) GetInterestById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterestById", reflect.TypeOf((*MockAdapterInterface)(nil).GetInterestById), id)
}

// GetInterestByName mocks base method.
func (m *MockAdapterInterface) GetInterestByName(interest string) (entities.Interests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterestByName", interest)
	ret0, _ := ret[0].(entities.Interests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterestByName indicates an expected call of GetInterestByName.
func (mr *MockAdapterInterfaceMockRecorder) GetInterestByName(interest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterestByName", reflect.TypeOf((*MockAdapterInterface)(nil).GetInterestByName), interest)
}

// GetPreferenceByProfileId mocks base method.
func (m *MockAdapterInterface) GetPreferenceByProfileId(profileId string) (entities.Preference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreferenceByProfileId", profileId)
	ret0, _ := ret[0].(entities.Preference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreferenceByProfileId indicates an expected call of GetPreferenceByProfileId.
func (mr *MockAdapterInterfaceMockRecorder) GetPreferenceByProfileId(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreferenceByProfileId", reflect.TypeOf((*MockAdapterInterface)(nil).GetPreferenceByProfileId), profileId)
}

// GetProfileIdByUserId mocks base method.
func (m *MockAdapterInterface) GetProfileIdByUserId(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileIdByUserId", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileIdByUserId indicates an expected call of GetProfileIdByUserId.
func (mr *MockAdapterInterfaceMockRecorder) GetProfileIdByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileIdByUserId", reflect.TypeOf((*MockAdapterInterface)(nil).GetProfileIdByUserId), userId)
}

// GetProfilePic mocks base method.
func (m *MockAdapterInterface) GetProfilePic(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfilePic", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfilePic indicates an expected call of GetProfilePic.
func (mr *MockAdapterInterfaceMockRecorder) GetProfilePic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfilePic", reflect.TypeOf((*MockAdapterInterface)(nil).GetProfilePic), arg0)
}

// GetUserByEmail mocks base method.
func (m *MockAdapterInterface) GetUserByEmail(email string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAdapterInterfaceMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockAdapterInterface) GetUserById(userId string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", userId)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockAdapterInterfaceMockRecorder) GetUserById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserById), userId)
}

// GetUserByPhone mocks base method.
func (m *MockAdapterInterface) GetUserByPhone(phone string) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByPhone", phone)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByPhone indicates an expected call of GetUserByPhone.
func (mr *MockAdapterInterfaceMockRecorder) GetUserByPhone(phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByPhone", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserByPhone), phone)
}

// GetUserGenderById mocks base method.
func (m *MockAdapterInterface) GetUserGenderById(profileId string, genderId int) (entities.UserGenders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserGenderById", profileId, genderId)
	ret0, _ := ret[0].(entities.UserGenders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserGenderById indicates an expected call of GetUserGenderById.
func (mr *MockAdapterInterfaceMockRecorder) GetUserGenderById(profileId, genderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserGenderById", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserGenderById), profileId, genderId)
}

// GetUserInterestById mocks base method.
func (m *MockAdapterInterface) GetUserInterestById(profileId string, interestId int) (entities.UserInterests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInterestById", profileId, interestId)
	ret0, _ := ret[0].(entities.UserInterests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInterestById indicates an expected call of GetUserInterestById.
func (mr *MockAdapterInterfaceMockRecorder) GetUserInterestById(profileId, interestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInterestById", reflect.TypeOf((*MockAdapterInterface)(nil).GetUserInterestById), profileId, interestId)
}

// IsUserExist mocks base method.
func (m *MockAdapterInterface) IsUserExist(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExist", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExist indicates an expected call of IsUserExist.
func (mr *MockAdapterInterfaceMockRecorder) IsUserExist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExist", reflect.TypeOf((*MockAdapterInterface)(nil).IsUserExist), id)
}

// UpdateAge mocks base method.
func (m *MockAdapterInterface) UpdateAge(age int, profileId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAge", age, profileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAge indicates an expected call of UpdateAge.
func (mr *MockAdapterInterfaceMockRecorder) UpdateAge(age, profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAge", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateAge), age, profileId)
}

// UpdateSubscription mocks base method.
func (m *MockAdapterInterface) UpdateSubscription(userId string, subscribed bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", userId, subscribed)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockAdapterInterfaceMockRecorder) UpdateSubscription(userId, subscribed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockAdapterInterface)(nil).UpdateSubscription), userId, subscribed)
}

// UploadProfileImage mocks base method.
func (m *MockAdapterInterface) UploadProfileImage(Image, ProfileId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadProfileImage", Image, ProfileId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadProfileImage indicates an expected call of UploadProfileImage.
func (mr *MockAdapterInterfaceMockRecorder) UploadProfileImage(Image, ProfileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadProfileImage", reflect.TypeOf((*MockAdapterInterface)(nil).UploadProfileImage), Image, ProfileId)
}

// UserAddAddress mocks base method.
func (m *MockAdapterInterface) UserAddAddress(arg0 entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddAddress indicates an expected call of UserAddAddress.
func (mr *MockAdapterInterfaceMockRecorder) UserAddAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddAddress", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddAddress), arg0)
}

// UserAddGender mocks base method.
func (m *MockAdapterInterface) UserAddGender(gender entities.UserGenders) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddGender", gender)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddGender indicates an expected call of UserAddGender.
func (mr *MockAdapterInterfaceMockRecorder) UserAddGender(gender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddGender", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddGender), gender)
}

// UserAddInterest mocks base method.
func (m *MockAdapterInterface) UserAddInterest(interest entities.UserInterests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddInterest", interest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddInterest indicates an expected call of UserAddInterest.
func (mr *MockAdapterInterfaceMockRecorder) UserAddInterest(interest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddInterest", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddInterest), interest)
}

// UserAddPreference mocks base method.
func (m *MockAdapterInterface) UserAddPreference(arg0 entities.Preference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAddPreference", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserAddPreference indicates an expected call of UserAddPreference.
func (mr *MockAdapterInterfaceMockRecorder) UserAddPreference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAddPreference", reflect.TypeOf((*MockAdapterInterface)(nil).UserAddPreference), arg0)
}

// UserDeleteInterest mocks base method.
func (m *MockAdapterInterface) UserDeleteInterest(interest entities.UserInterests) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteInterest", interest)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserDeleteInterest indicates an expected call of UserDeleteInterest.
func (mr *MockAdapterInterfaceMockRecorder) UserDeleteInterest(interest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteInterest", reflect.TypeOf((*MockAdapterInterface)(nil).UserDeleteInterest), interest)
}

// UserEditAddress mocks base method.
func (m *MockAdapterInterface) UserEditAddress(arg0 entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserEditAddress indicates an expected call of UserEditAddress.
func (mr *MockAdapterInterfaceMockRecorder) UserEditAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditAddress", reflect.TypeOf((*MockAdapterInterface)(nil).UserEditAddress), arg0)
}

// UserEditPreference mocks base method.
func (m *MockAdapterInterface) UserEditPreference(arg0 entities.Preference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserEditPreference", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserEditPreference indicates an expected call of UserEditPreference.
func (mr *MockAdapterInterfaceMockRecorder) UserEditPreference(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserEditPreference", reflect.TypeOf((*MockAdapterInterface)(nil).UserEditPreference), arg0)
}

// UserGetAllGender mocks base method.
func (m *MockAdapterInterface) UserGetAllGender(profileId string) (helperStruct.GenderHelper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetAllGender", profileId)
	ret0, _ := ret[0].(helperStruct.GenderHelper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetAllGender indicates an expected call of UserGetAllGender.
func (mr *MockAdapterInterfaceMockRecorder) UserGetAllGender(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetAllGender", reflect.TypeOf((*MockAdapterInterface)(nil).UserGetAllGender), profileId)
}

// UserGetAllInterest mocks base method.
func (m *MockAdapterInterface) UserGetAllInterest(profileId string) ([]entities.Interests, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetAllInterest", profileId)
	ret0, _ := ret[0].([]entities.Interests)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserGetAllInterest indicates an expected call of UserGetAllInterest.
func (mr *MockAdapterInterfaceMockRecorder) UserGetAllInterest(profileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetAllInterest", reflect.TypeOf((*MockAdapterInterface)(nil).UserGetAllInterest), profileId)
}

// UserSignup mocks base method.
func (m *MockAdapterInterface) UserSignup(arg0 entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", arg0)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockAdapterInterfaceMockRecorder) UserSignup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockAdapterInterface)(nil).UserSignup), arg0)
}
